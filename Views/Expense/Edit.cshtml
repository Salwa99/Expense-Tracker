@model Expense_Tracker.Models.Expense
@{
    ViewData["Title"] = "Edit Expense";
}

<div class="container mx-auto px-4 py-8">
    <div class="max-w-2xl mx-auto bg-white rounded-xl shadow-lg p-8">
        <div class="flex justify-between items-center mb-6">
            <h2 class="text-2xl font-bold text-gray-900">Edit Expense</h2>
            <a asp-action="Index" class="text-blue-600 hover:text-blue-800">Back to List</a>
        </div>

        <div id="alertMessage" class="hidden"></div>
        <div class="validation-summary-errors text-red-500" asp-validation-summary="All"></div>

        <form id="editForm" onsubmit="handleSubmit(event)">
            @Html.AntiForgeryToken()
            <input type="hidden" id="Id" value="@Model.Id" />
            <input type="hidden" id="UserId" value="@Model.UserId" />

            <div class="mb-4">
                <label for="Description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                <input type="text" id="Description"
                       value="@Model.Description"
                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                       required
                       minlength="3"
                       maxlength="100" />
                <span class="error-message text-sm text-red-500"></span>
            </div>

            <div class="mb-4">
                <label for="Amount" class="block text-sm font-medium text-gray-700 mb-1">Amount ($)</label>
                <input type="number" id="Amount"
                       value="@Model.Amount.ToString("F2")"
                       step="0.01"
                       min="0.01"
                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                       required />
                <span class="error-message text-sm text-red-500"></span>
            </div>

            <div class="mb-4">
                <label for="Date" class="block text-sm font-medium text-gray-700 mb-1">Date</label>
                <input type="date" id="Date"
                       value="@Model.Date.ToString("yyyy-MM-dd")"
                       class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                       required />
                <span class="error-message text-sm text-red-500"></span>
            </div>

            <div class="mb-6">
                <label for="CategoryId" class="block text-sm font-medium text-gray-700 mb-1">Category</label>
                <select id="CategoryId"
                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        required>
                    <option value="">Select a category</option>
                    @foreach (var item in (SelectList)ViewBag.Categories)
                    {
                        <option value="@item.Value" selected="@(item.Value == Model.CategoryId.ToString())">
                            @item.Text
                        </option>
                    }
                </select>
                <span class="error-message text-sm text-red-500"></span>
            </div>

            <div class="flex justify-end space-x-4">
                <a asp-action="Index" class="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50">Cancel</a>
                <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Save Changes</button>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script>
        function showAlert(message, isSuccess) {
            const alertDiv = document.getElementById('alertMessage');
            if (alertDiv) {
                alertDiv.className = isSuccess
                    ? 'bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative mb-4'
                    : 'bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4';
                alertDiv.textContent = message;
                alertDiv.classList.remove('hidden');
            }
        }

        async function handleSubmit(event) {
            event.preventDefault();

            document.querySelectorAll('.error-message').forEach(el => el.textContent = '');

            const id = document.getElementById('Id').value;
            const expense = {
                id: parseInt(id),
                description: document.getElementById('Description').value,
                amount: parseFloat(document.getElementById('Amount').value),
                date: document.getElementById('Date').value,
                categoryId: parseInt(document.getElementById('CategoryId').value),
                userId: document.getElementById('UserId').value
            };

            try {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                const response = await fetch(`/Expense/Edit/${id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    },
                    body: JSON.stringify(expense)
                });

                const result = await response.json();

                if (response.ok && result.success) {
                    showAlert(result.message, true);
                    setTimeout(() => {
                        window.location.href = '/Expense/Index';
                    }, 1500);
                } else {
                    showAlert(result.message, false);
                    if (result.errors && Array.isArray(result.errors)) {
                        result.errors.forEach(error => {
                            const errorDiv = document.querySelector('.validation-summary-errors ul');
                            if (errorDiv) {
                                const li = document.createElement('li');
                                li.textContent = error;
                                errorDiv.appendChild(li);
                            }
                        });
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                showAlert('An error occurred while updating the expense.', false);
            }
        }
    </script>
}