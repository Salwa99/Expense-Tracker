@model Expense_Tracker.Models.ViewModels.DashboardViewModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="container mx-auto px-4 py-8">
    <!-- Stats Cards -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow-lg p-6">
            <h3 class="text-lg font-semibold text-gray-600 mb-2">Total Expenses</h3>
            <p class="text-3xl font-bold text-blue-600">@Model.TotalExpenses.ToString("C")</p>
        </div>
        <div class="bg-white rounded-xl shadow-lg p-6">
            <h3 class="text-lg font-semibold text-gray-600 mb-2">Categories</h3>
            <p class="text-3xl font-bold text-green-600">@Model.CategoryExpenses.Count</p>
        </div>
        <div class="bg-white rounded-xl shadow-lg p-6">
            <h3 class="text-lg font-semibold text-gray-600 mb-2">Recent Month</h3>
            <p class="text-3xl font-bold text-purple-600">@(Model.MonthlyExpenses.LastOrDefault()?.Amount.ToString("C") ?? "$0.00")</p>
        </div>
    </div>

    <!-- Charts -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
        <div class="bg-white rounded-xl shadow-lg p-6">
            <h3 class="text-lg font-semibold mb-4">Expenses by Category</h3>
            <div id="categoryChart" class="h-64"></div>
        </div>
        <div class="bg-white rounded-xl shadow-lg p-6">
            <h3 class="text-lg font-semibold mb-4">Monthly Trend</h3>
            <div id="trendChart" class="h-64"></div>
        </div>
    </div>

    <!-- Recent Transactions -->
    <div class="bg-white rounded-xl shadow-lg p-6">
        <div class="flex justify-between items-center mb-4">
            <h3 class="text-lg font-semibold">Recent Transactions</h3>
            <a href="@Url.Action("Create", "Expense")"
               class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                Add Expense
            </a>
        </div>
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead>
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Description</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Amount</th>
                        <th class="px-6 py-3"></th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var expense in Model.RecentExpenses)
                    {
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap">@expense.Date.ToShortDateString()</td>
                            <td class="px-6 py-4">@expense.Description</td>
                            <td class="px-6 py-4">@expense.Category.Name</td>
                            <td class="px-6 py-4">@expense.Amount.ToString("C")</td>
                            <td class="px-6 py-4 text-right">
                                <a href="@Url.Action("Edit", "Expense", new { id = expense.Id })"
                                   class="text-blue-600 hover:text-blue-900">Edit</a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
          
            // Category Donut Chart
            const categoryData = @Html.Raw(Json.Serialize(Model.CategoryExpenses));
            if (categoryData && categoryData.length > 0) {
                const categoryOptions = {
                    series: categoryData.map(x => x.totalAmount),
                    chart: {
                        type: 'donut',
                        height: 300
                    },
                    labels: categoryData.map(x => x.categoryName),
                    colors: categoryData.map(x => x.color),
                    legend: {
                        position: 'right'
                    },
                    tooltip: {
                        y: {
                            formatter: function(value) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    },
                    dataLabels: {
                        enabled: false
                    }
                };

                const categoryChart = new ApexCharts(document.querySelector("#categoryChart"), categoryOptions);
                categoryChart.render();
            }

            // Monthly Trend Line Chart
            const monthlyData = @Html.Raw(Json.Serialize(Model.MonthlyExpenses));
            if (monthlyData && monthlyData.length > 0) {
                const monthlyOptions = {
                    series: [{
                        name: 'Monthly Expenses',
                        data: monthlyData.map(x => x.amount)
                    }],
                    chart: {
                        height: 300,
                        type: 'area',
                        toolbar: {
                            show: false
                        }
                    },
                    dataLabels: {
                        enabled: false
                    },
                    stroke: {
                        curve: 'smooth',
                        width: 2
                    },
                    xaxis: {
                        categories: monthlyData.map(x => x.month)
                    },
                    yaxis: {
                        labels: {
                            formatter: function(value) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    },
                    tooltip: {
                        y: {
                            formatter: function(value) {
                                return '$' + value.toFixed(2);
                            }
                        }
                    },
                    fill: {
                        type: 'gradient',
                        gradient: {
                            shadeIntensity: 1,
                            opacityFrom: 0.7,
                            opacityTo: 0.9,
                            stops: [0, 90, 100]
                        }
                    }
                };

                const trendChart = new ApexCharts(document.querySelector("#trendChart"), monthlyOptions);
                trendChart.render();
            }
        });
    </script>
}